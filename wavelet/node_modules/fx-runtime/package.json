{
  "name": "fx-runtime",
  "version": "0.1.12",
  "main": "./index.js",
  "engines": {
    "node": "0.12.*"
  },
  "dependencies": {
    "architect": "0.1.*",
    "minimist": "1.1.x"
  },
  "readme": "README.md\n\n# fx-runtime\n\n## Description\n**Wavelet** runtime, manages plugins.\n\n## Usage\n`````javascript\nvar runtime = require('fx-runtime');\nvar dir = __dirname; // reference dir for config and plugins\nvar config = 'your config file, related to your home';\n\nruntime.start(dir, config, function() {\n    console.log('Usage: yourapp [Options]');\n    console.log('Options:');\n    // TODO: add you options here\n    console.log('');\n});\n`````\n\nYou can also pass an array object to as the config\n`````javascript\nvar runtime = require('fx-runtime');\nvar dir = __dirname; // reference dir for config and plugins\nvar config = [\n    {\n        packagePath: \"plugin A's package path\",\n        // other options here\n    },\n    {\n        packagePath: \"plugin B's package path\",\n        // other options here\n    }\n];\n\nruntime.start(dir, config, function() {\n    console.log('Usage: yourapp [Options]');\n    console.log('Options:');\n    // TODO: add you options here\n    console.log('');\n});\n`````\n\nConfig argument could be a function too:\n`````javascript\nvar runtime = require('fx-runtime');\nvar dir = __dirname; // reference dir for config and plugins\nvar function getConfig() { \n    return [\n        {\n            packagePath: \"plugin A's package path\",\n            // other options here\n        },\n        {\n            packagePath: \"plugin B's package path\",\n            // other options here\n        }\n    ]\n};\n\nruntime.start(dir, getConfig, function() {\n    console.log('Usage: yourapp [Options]');\n    console.log('Options:');\n    // TODO: add you options here\n    console.log('');\n});\n`````\n\nAutomatically resolve config and help\n`````javascript\nvar runtime = require('fx-runtime');\n\nvar defaultConfig = require('./config.json');\n\nvar pluginPaths = [\n    __dirname + '/node_modules'\n];\n\nvar preDefinedHelp = {\n  \"--help\": \"print help\"\n  // other help information\n};\n\nvar filter = {\n  \"whiteList\": [], // plugin white list, or set it to null\n  \"blackList\": [] // plugin black list, or set it to null\n}\n\nvar plugins = runtime.resolvePlugins(pluginPaths, defaultConfig, preDefinedHelp, filter);\n\nruntime.start(__dirname, plugins.config, function() {\n    console.log('Usage: wavelet [optins]');\n    console.log('Options:');\n    // TODO: add your options here\n\n    console.log('Plugin Options:');\n\n    for (var i = 0; i < plugins.help.length; i++) {\n        console.log(plugins.help[i]);\n    }\n    \n    console.log('');\n});\n`````\n\n\n## Registered global variables\n**Wavelet** runtime registers several global variables, you need to avoid overriding them.\n\n### Variable: home \n[String] The location where wavelet is installed, **home** will be used to locate the config file, the plugins and other resources\n\n### Variable: runtime\n[Object] **runtime** provides runtime APIs:\n\n#### runtime.getService([string] service)\nget the instance of service or null if not found. Do not use this api unless you have to. This api breaks the plugin dependencies. Best practice: Depend on a plugin that provides this service.\n\n#### runtime.resolvePlugins([array] searchPath, [object] defaultConfig, [object] defaultHelp)\nsearch plugin configurations and help informations in the search path array. The plugin configuration is defined in package.json file as \"plugin-config\". The plugin arguments is defined in package.json file as \"plugin-args\". This API returns an object with two properties: \n\n- config: the config of plugins\n- help: the argument description of plugins\n\nYou can pass *config* as the second parameter of *runtime.start*. And print the help out in the third argument of *runtime.start*\n\n\n## Plugin\n**Wavelet** is based on [architect](https://github.com/c9/architect), and provides additional APIs and tools. An architect plugin could be directly used in **Wavelet**. \n\n### service\nA plugin could **consume** services provided from other plugins, and **provides** services to others.\n\nYou can use the online **Wavelet** service registry to find services and the plugins that implement it.\n",
  "readmeFilename": "README.md",
  "description": "README.md",
  "_id": "fx-runtime@0.1.12",
  "scripts": {},
  "_shasum": "f45c50f15bd46de72ffa811cb9520eb76d4c12aa",
  "_from": "fx-runtime@0.1.x"
}
